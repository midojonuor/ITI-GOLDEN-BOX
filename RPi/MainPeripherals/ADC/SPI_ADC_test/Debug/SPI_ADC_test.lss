
SPI_ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000896  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000009  00800060  00800060  0000090a  2**0
                  ALLOC
  2 .stab         00001020  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000caf  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 36       	cpi	r26, 0x69	; 105
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
  74:	0c 94 49 04 	jmp	0x892	; 0x892 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
#include "ADC_register.h"
#include "ADC_interface.h"


void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	/*8-bits mode , a Vcc ref voltage, Polling(not interrupt)*/
	/*A vcc ref voltage */

	CLR_BIT(ADMUX,7);
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,6);
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	8c 93       	st	X, r24

	/*Active left adjuster mode*/

	SET_BIT(ADMUX,5);
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24

	/*ADC enable*/
	SET_BIT(ADCSRA,7);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	8c 93       	st	X, r24

	/*Prescaler divion by 128*/
	SET_BIT(ADCSRA,2);
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,0);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_u8GetChannelReading>:

u8 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	89 83       	std	Y+1, r24	; 0x01
	/*Set channel in ADMUX*/
	ADMUX &= 0b11100000;
  f8:	a7 e2       	ldi	r26, 0x27	; 39
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e7 e2       	ldi	r30, 0x27	; 39
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 7e       	andi	r24, 0xE0	; 224
 104:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
 106:	a7 e2       	ldi	r26, 0x27	; 39
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e7 e2       	ldi	r30, 0x27	; 39
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	89 2b       	or	r24, r25
 114:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,6);
 116:	a6 e2       	ldi	r26, 0x26	; 38
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	e6 e2       	ldi	r30, 0x26	; 38
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 64       	ori	r24, 0x40	; 64
 122:	8c 93       	st	X, r24

	/*Polling on the conversion complete flag*/
	while ((GET_BIT(ADCSRA,4))==0);
 124:	e6 e2       	ldi	r30, 0x26	; 38
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	81 70       	andi	r24, 0x01	; 1
 134:	90 70       	andi	r25, 0x00	; 0
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	a9 f3       	breq	.-22     	; 0x124 <ADC_u8GetChannelReading+0x38>
	/*Clear the flag*/
	SET_BIT(ADCSRA,4);
 13a:	a6 e2       	ldi	r26, 0x26	; 38
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e6 e2       	ldi	r30, 0x26	; 38
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8c 93       	st	X, r24
	/*Get the result*/
	return ADCH;
 148:	e5 e2       	ldi	r30, 0x25	; 37
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
}
 14e:	0f 90       	pop	r0
 150:	cf 91       	pop	r28
 152:	df 91       	pop	r29
 154:	08 95       	ret

00000156 <SetPinValue>:
#include "DIO_private.h"
#include "DIO_register.h"
#include "DIO_config.h"

void SetPinValue(u8 Port,u8 Pin,u8 Val)
{
 156:	df 93       	push	r29
 158:	cf 93       	push	r28
 15a:	00 d0       	rcall	.+0      	; 0x15c <SetPinValue+0x6>
 15c:	00 d0       	rcall	.+0      	; 0x15e <SetPinValue+0x8>
 15e:	0f 92       	push	r0
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	6a 83       	std	Y+2, r22	; 0x02
 168:	4b 83       	std	Y+3, r20	; 0x03
	switch (Port)
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	3d 83       	std	Y+5, r19	; 0x05
 172:	2c 83       	std	Y+4, r18	; 0x04
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	9d 81       	ldd	r25, Y+5	; 0x05
 178:	82 34       	cpi	r24, 0x42	; 66
 17a:	91 05       	cpc	r25, r1
 17c:	09 f4       	brne	.+2      	; 0x180 <SetPinValue+0x2a>
 17e:	44 c0       	rjmp	.+136    	; 0x208 <SetPinValue+0xb2>
 180:	2c 81       	ldd	r18, Y+4	; 0x04
 182:	3d 81       	ldd	r19, Y+5	; 0x05
 184:	23 34       	cpi	r18, 0x43	; 67
 186:	31 05       	cpc	r19, r1
 188:	34 f4       	brge	.+12     	; 0x196 <SetPinValue+0x40>
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	9d 81       	ldd	r25, Y+5	; 0x05
 18e:	81 34       	cpi	r24, 0x41	; 65
 190:	91 05       	cpc	r25, r1
 192:	71 f0       	breq	.+28     	; 0x1b0 <SetPinValue+0x5a>
 194:	bc c0       	rjmp	.+376    	; 0x30e <SetPinValue+0x1b8>
 196:	2c 81       	ldd	r18, Y+4	; 0x04
 198:	3d 81       	ldd	r19, Y+5	; 0x05
 19a:	23 34       	cpi	r18, 0x43	; 67
 19c:	31 05       	cpc	r19, r1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <SetPinValue+0x4c>
 1a0:	5f c0       	rjmp	.+190    	; 0x260 <SetPinValue+0x10a>
 1a2:	8c 81       	ldd	r24, Y+4	; 0x04
 1a4:	9d 81       	ldd	r25, Y+5	; 0x05
 1a6:	84 34       	cpi	r24, 0x44	; 68
 1a8:	91 05       	cpc	r25, r1
 1aa:	09 f4       	brne	.+2      	; 0x1ae <SetPinValue+0x58>
 1ac:	85 c0       	rjmp	.+266    	; 0x2b8 <SetPinValue+0x162>
 1ae:	af c0       	rjmp	.+350    	; 0x30e <SetPinValue+0x1b8>
	{
	case 'A':
		if (Val == 0)
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	88 23       	and	r24, r24
 1b4:	a9 f4       	brne	.+42     	; 0x1e0 <SetPinValue+0x8a>
		{
			CLR_BIT(PORTA,Pin);
 1b6:	ab e3       	ldi	r26, 0x3B	; 59
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	eb e3       	ldi	r30, 0x3B	; 59
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <SetPinValue+0x7e>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <SetPinValue+0x7a>
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	8c 93       	st	X, r24
 1de:	97 c0       	rjmp	.+302    	; 0x30e <SetPinValue+0x1b8>
		}

		else
		{
			SET_BIT(PORTA,Pin);
 1e0:	ab e3       	ldi	r26, 0x3B	; 59
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	eb e3       	ldi	r30, 0x3B	; 59
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <SetPinValue+0xa8>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <SetPinValue+0xa4>
 202:	84 2b       	or	r24, r20
 204:	8c 93       	st	X, r24
 206:	83 c0       	rjmp	.+262    	; 0x30e <SetPinValue+0x1b8>
		}
		break;
	case 'B':
		if (Val == 0)
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	88 23       	and	r24, r24
 20c:	a9 f4       	brne	.+42     	; 0x238 <SetPinValue+0xe2>
		{
			CLR_BIT(PORTB,Pin);
 20e:	a8 e3       	ldi	r26, 0x38	; 56
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e8 e3       	ldi	r30, 0x38	; 56
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	8a 81       	ldd	r24, Y+2	; 0x02
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <SetPinValue+0xd6>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <SetPinValue+0xd2>
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	8c 93       	st	X, r24
 236:	6b c0       	rjmp	.+214    	; 0x30e <SetPinValue+0x1b8>
		}

		else
		{
			SET_BIT(PORTB,Pin);
 238:	a8 e3       	ldi	r26, 0x38	; 56
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e8 e3       	ldi	r30, 0x38	; 56
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <SetPinValue+0x100>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <SetPinValue+0xfc>
 25a:	84 2b       	or	r24, r20
 25c:	8c 93       	st	X, r24
 25e:	57 c0       	rjmp	.+174    	; 0x30e <SetPinValue+0x1b8>
		}
		break;
	case 'C':
		if (Val == 0)
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	88 23       	and	r24, r24
 264:	a9 f4       	brne	.+42     	; 0x290 <SetPinValue+0x13a>
		{
			CLR_BIT(PORTC,Pin);
 266:	a5 e3       	ldi	r26, 0x35	; 53
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	e5 e3       	ldi	r30, 0x35	; 53
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	48 2f       	mov	r20, r24
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 2e       	mov	r0, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <SetPinValue+0x12e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <SetPinValue+0x12a>
 288:	80 95       	com	r24
 28a:	84 23       	and	r24, r20
 28c:	8c 93       	st	X, r24
 28e:	3f c0       	rjmp	.+126    	; 0x30e <SetPinValue+0x1b8>
		}

		else
		{
			SET_BIT(PORTC,Pin);
 290:	a5 e3       	ldi	r26, 0x35	; 53
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	e5 e3       	ldi	r30, 0x35	; 53
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	48 2f       	mov	r20, r24
 29c:	8a 81       	ldd	r24, Y+2	; 0x02
 29e:	28 2f       	mov	r18, r24
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 2e       	mov	r0, r18
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <SetPinValue+0x158>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	0a 94       	dec	r0
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <SetPinValue+0x154>
 2b2:	84 2b       	or	r24, r20
 2b4:	8c 93       	st	X, r24
 2b6:	2b c0       	rjmp	.+86     	; 0x30e <SetPinValue+0x1b8>
		}
		break;
	case 'D':
		if (Val == 0)
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	88 23       	and	r24, r24
 2bc:	a9 f4       	brne	.+42     	; 0x2e8 <SetPinValue+0x192>
		{
			CLR_BIT(PORTD,Pin);
 2be:	a2 e3       	ldi	r26, 0x32	; 50
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e2 e3       	ldi	r30, 0x32	; 50
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	48 2f       	mov	r20, r24
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	28 2f       	mov	r18, r24
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 2e       	mov	r0, r18
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <SetPinValue+0x186>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	0a 94       	dec	r0
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <SetPinValue+0x182>
 2e0:	80 95       	com	r24
 2e2:	84 23       	and	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	13 c0       	rjmp	.+38     	; 0x30e <SetPinValue+0x1b8>
		}

		else
		{
			SET_BIT(PORTD,Pin);
 2e8:	a2 e3       	ldi	r26, 0x32	; 50
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e2 e3       	ldi	r30, 0x32	; 50
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <SetPinValue+0x1b0>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <SetPinValue+0x1ac>
 30a:	84 2b       	or	r24, r20
 30c:	8c 93       	st	X, r24
		}
		break;
	}

}
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	08 95       	ret

0000031e <GetPinValue>:

u8 GetPinValue(u8 Port,u8 Pin)
{
 31e:	df 93       	push	r29
 320:	cf 93       	push	r28
 322:	00 d0       	rcall	.+0      	; 0x324 <GetPinValue+0x6>
 324:	00 d0       	rcall	.+0      	; 0x326 <GetPinValue+0x8>
 326:	0f 92       	push	r0
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	8a 83       	std	Y+2, r24	; 0x02
 32e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Result;
	switch (Port)
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	3d 83       	std	Y+5, r19	; 0x05
 338:	2c 83       	std	Y+4, r18	; 0x04
 33a:	4c 81       	ldd	r20, Y+4	; 0x04
 33c:	5d 81       	ldd	r21, Y+5	; 0x05
 33e:	42 34       	cpi	r20, 0x42	; 66
 340:	51 05       	cpc	r21, r1
 342:	41 f1       	breq	.+80     	; 0x394 <GetPinValue+0x76>
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	9d 81       	ldd	r25, Y+5	; 0x05
 348:	83 34       	cpi	r24, 0x43	; 67
 34a:	91 05       	cpc	r25, r1
 34c:	34 f4       	brge	.+12     	; 0x35a <GetPinValue+0x3c>
 34e:	2c 81       	ldd	r18, Y+4	; 0x04
 350:	3d 81       	ldd	r19, Y+5	; 0x05
 352:	21 34       	cpi	r18, 0x41	; 65
 354:	31 05       	cpc	r19, r1
 356:	61 f0       	breq	.+24     	; 0x370 <GetPinValue+0x52>
 358:	52 c0       	rjmp	.+164    	; 0x3fe <GetPinValue+0xe0>
 35a:	4c 81       	ldd	r20, Y+4	; 0x04
 35c:	5d 81       	ldd	r21, Y+5	; 0x05
 35e:	43 34       	cpi	r20, 0x43	; 67
 360:	51 05       	cpc	r21, r1
 362:	51 f1       	breq	.+84     	; 0x3b8 <GetPinValue+0x9a>
 364:	8c 81       	ldd	r24, Y+4	; 0x04
 366:	9d 81       	ldd	r25, Y+5	; 0x05
 368:	84 34       	cpi	r24, 0x44	; 68
 36a:	91 05       	cpc	r25, r1
 36c:	b9 f1       	breq	.+110    	; 0x3dc <GetPinValue+0xbe>
 36e:	47 c0       	rjmp	.+142    	; 0x3fe <GetPinValue+0xe0>
	{
	case 'A': Result=GET_BIT(PINA,Pin);	break;
 370:	e9 e3       	ldi	r30, 0x39	; 57
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	88 2f       	mov	r24, r24
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	a9 01       	movw	r20, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <GetPinValue+0x6a>
 384:	55 95       	asr	r21
 386:	47 95       	ror	r20
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <GetPinValue+0x66>
 38c:	ca 01       	movw	r24, r20
 38e:	81 70       	andi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01
 392:	35 c0       	rjmp	.+106    	; 0x3fe <GetPinValue+0xe0>
	case 'B': Result=GET_BIT(PINB,Pin);	break;
 394:	e6 e3       	ldi	r30, 0x36	; 54
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a9 01       	movw	r20, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GetPinValue+0x8e>
 3a8:	55 95       	asr	r21
 3aa:	47 95       	ror	r20
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GetPinValue+0x8a>
 3b0:	ca 01       	movw	r24, r20
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	23 c0       	rjmp	.+70     	; 0x3fe <GetPinValue+0xe0>
	case 'C': Result=GET_BIT(PINC,Pin);	break;
 3b8:	e3 e3       	ldi	r30, 0x33	; 51
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GetPinValue+0xb2>
 3cc:	55 95       	asr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <GetPinValue+0xae>
 3d4:	ca 01       	movw	r24, r20
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	11 c0       	rjmp	.+34     	; 0x3fe <GetPinValue+0xe0>
	case 'D': Result=GET_BIT(PIND,Pin);	break;
 3dc:	e0 e3       	ldi	r30, 0x30	; 48
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GetPinValue+0xd6>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <GetPinValue+0xd2>
 3f8:	ca 01       	movw	r24, r20
 3fa:	81 70       	andi	r24, 0x01	; 1
 3fc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Result;
 3fe:	89 81       	ldd	r24, Y+1	; 0x01

}
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	08 95       	ret

00000410 <PORTInitialize>:

#include "PORT_confg.h"
#include "PORT_private.h"

void PORTInitialize(void)
{
 410:	df 93       	push	r29
 412:	cf 93       	push	r28
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 418:	ea e3       	ldi	r30, 0x3A	; 58
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	8d ef       	ldi	r24, 0xFD	; 253
 41e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
 420:	e7 e3       	ldi	r30, 0x37	; 55
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	85 e4       	ldi	r24, 0x45	; 69
 426:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
 428:	e4 e3       	ldi	r30, 0x34	; 52
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	84 ed       	ldi	r24, 0xD4	; 212
 42e:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
 430:	e1 e3       	ldi	r30, 0x31	; 49
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	8a e4       	ldi	r24, 0x4A	; 74
 436:	80 83       	st	Z, r24
	
}
 438:	cf 91       	pop	r28
 43a:	df 91       	pop	r29
 43c:	08 95       	ret

0000043e <SPI_voidInit>:

static void (*SPI_pfNotificationFun)(void) = NULL;


void SPI_voidInit(void)
{
 43e:	df 93       	push	r29
 440:	cf 93       	push	r28
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SPCR,SPCR_SPR0);
		SET_BIT(SPSR,SPSR_SPI2X);
#endif

#elif SPI_u8_SELECT_MODE == SPI_u8_SLAVE
	CLR_BIT(SPCR,SPCR_MSTR);
 446:	ad e2       	ldi	r26, 0x2D	; 45
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	ed e2       	ldi	r30, 0x2D	; 45
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	8f 7e       	andi	r24, 0xEF	; 239
 452:	8c 93       	st	X, r24
#endif

	/* Choose The Data order */
#if   SPI_u8_DATA_ORDER == SPI_u8_MSB
	CLR_BIT(SPCR,SPCR_DORD);
 454:	ad e2       	ldi	r26, 0x2D	; 45
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	ed e2       	ldi	r30, 0x2D	; 45
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	8f 7d       	andi	r24, 0xDF	; 223
 460:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_DORD);
#endif

	/* Choose Clk Polarity */
#if   SPI_u8_CLK_POL    == SPI_u8_FALLING_EDGE
	SET_BIT(SPCR,SPCR_CPOL);
 462:	ad e2       	ldi	r26, 0x2D	; 45
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	ed e2       	ldi	r30, 0x2D	; 45
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_CPOL);
#endif

	/* Choose Clk Phase */
#if   SPI_u8_CLK_PHASE  == SPI_u8_SAMPLE
	CLR_BIT(SPCR,SPCR_CPHA);
 470:	ad e2       	ldi	r26, 0x2D	; 45
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	ed e2       	ldi	r30, 0x2D	; 45
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	8b 7f       	andi	r24, 0xFB	; 251
 47c:	8c 93       	st	X, r24
#elif SPI_u8_CLK_PHASE  == SPI_u8_SETUP
	SET_BIT(SPCR,SPCR_CPHA);
#endif
	/* SPI Enable */
	SET_BIT(SPCR,SPCR_SPE);
 47e:	ad e2       	ldi	r26, 0x2D	; 45
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	ed e2       	ldi	r30, 0x2D	; 45
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	8c 93       	st	X, r24
}
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	08 95       	ret

00000492 <SPI_u8SendDataByteSynch>:

u8   SPI_u8SendDataByteSynch(u8 Copy_u8TransmittedByte)
{
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	00 d0       	rcall	.+0      	; 0x498 <SPI_u8SendDataByteSynch+0x6>
 498:	00 d0       	rcall	.+0      	; 0x49a <SPI_u8SendDataByteSynch+0x8>
 49a:	0f 92       	push	r0
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	8d 83       	std	Y+5, r24	; 0x05
	u8  Local_u8ReturnState       = STD_TYPES_u8_ERROR_OK;
 4a2:	1c 82       	std	Y+4, r1	; 0x04
	u16 Local_u16TimeOutCounter   = 0;
 4a4:	1b 82       	std	Y+3, r1	; 0x03
 4a6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_ChannelNum=0;
 4a8:	19 82       	std	Y+1, r1	; 0x01

   /*------Startt Read -------*/	
	Local_ChannelNum = SPDR;
 4aa:	ef e2       	ldi	r30, 0x2F	; 47
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <SPI_u8SendDataByteSynch+0x2c>
	/* wait until Transmission is completed */
	while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
	{
		Local_u16TimeOutCounter++;
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	9b 81       	ldd	r25, Y+3	; 0x03
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	9b 83       	std	Y+3, r25	; 0x03
 4bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ChannelNum=0;

   /*------Startt Read -------*/	
	Local_ChannelNum = SPDR;
	/* wait until Transmission is completed */
	while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
 4be:	ee e2       	ldi	r30, 0x2E	; 46
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	88 23       	and	r24, r24
 4c6:	34 f0       	brlt	.+12     	; 0x4d4 <SPI_u8SendDataByteSynch+0x42>
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	9b 81       	ldd	r25, Y+3	; 0x03
 4cc:	23 ec       	ldi	r18, 0xC3	; 195
 4ce:	80 35       	cpi	r24, 0x50	; 80
 4d0:	92 07       	cpc	r25, r18
 4d2:	80 f3       	brcs	.-32     	; 0x4b4 <SPI_u8SendDataByteSynch+0x22>
	{
		Local_u16TimeOutCounter++;
	}
	if (Local_u16TimeOutCounter >= SPI_u16_TIMEOUT)
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	9b 81       	ldd	r25, Y+3	; 0x03
 4d8:	23 ec       	ldi	r18, 0xC3	; 195
 4da:	80 35       	cpi	r24, 0x50	; 80
 4dc:	92 07       	cpc	r25, r18
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <SPI_u8SendDataByteSynch+0x52>
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	8c 83       	std	Y+4, r24	; 0x04
	}
/*------Startt Send-------*/	
	SPDR = Copy_u8TransmittedByte;
 4e4:	ef e2       	ldi	r30, 0x2F	; 47
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ea:	80 83       	st	Z, r24
	/* Check Collision flag */
	if( GET_BIT(SPSR,SPSR_WCOL) == 1)
 4ec:	ee e2       	ldi	r30, 0x2E	; 46
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	82 95       	swap	r24
 4f4:	86 95       	lsr	r24
 4f6:	86 95       	lsr	r24
 4f8:	83 70       	andi	r24, 0x03	; 3
 4fa:	88 2f       	mov	r24, r24
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	81 70       	andi	r24, 0x01	; 1
 500:	90 70       	andi	r25, 0x00	; 0
 502:	88 23       	and	r24, r24
 504:	41 f0       	breq	.+16     	; 0x516 <SPI_u8SendDataByteSynch+0x84>
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	8c 83       	std	Y+4, r24	; 0x04
 50a:	05 c0       	rjmp	.+10     	; 0x516 <SPI_u8SendDataByteSynch+0x84>
	}

	/* wait until Transmission is completed */
	while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
	{
		Local_u16TimeOutCounter++;
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	9b 81       	ldd	r25, Y+3	; 0x03
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	9b 83       	std	Y+3, r25	; 0x03
 514:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
	}

	/* wait until Transmission is completed */
	while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
 516:	ee e2       	ldi	r30, 0x2E	; 46
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	88 23       	and	r24, r24
 51e:	34 f0       	brlt	.+12     	; 0x52c <SPI_u8SendDataByteSynch+0x9a>
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	9b 81       	ldd	r25, Y+3	; 0x03
 524:	23 ec       	ldi	r18, 0xC3	; 195
 526:	80 35       	cpi	r24, 0x50	; 80
 528:	92 07       	cpc	r25, r18
 52a:	80 f3       	brcs	.-32     	; 0x50c <SPI_u8SendDataByteSynch+0x7a>
	{
		Local_u16TimeOutCounter++;
	}
	if (Local_u16TimeOutCounter >= SPI_u16_TIMEOUT)
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	9b 81       	ldd	r25, Y+3	; 0x03
 530:	23 ec       	ldi	r18, 0xC3	; 195
 532:	80 35       	cpi	r24, 0x50	; 80
 534:	92 07       	cpc	r25, r18
 536:	10 f0       	brcs	.+4      	; 0x53c <SPI_u8SendDataByteSynch+0xaa>
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	8c 83       	std	Y+4, r24	; 0x04
	}

	return Local_ChannelNum;
 53c:	89 81       	ldd	r24, Y+1	; 0x01
}
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <SPI_u8RecieveDataByteSynch>:

u8   SPI_u8RecieveDataByteSynch(u8 * Copy_pu8RecievedByte)
{
 54e:	df 93       	push	r29
 550:	cf 93       	push	r28
 552:	00 d0       	rcall	.+0      	; 0x554 <SPI_u8RecieveDataByteSynch+0x6>
 554:	00 d0       	rcall	.+0      	; 0x556 <SPI_u8RecieveDataByteSynch+0x8>
 556:	0f 92       	push	r0
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	9d 83       	std	Y+5, r25	; 0x05
 55e:	8c 83       	std	Y+4, r24	; 0x04
	u8  Local_u8ReturnState = STD_TYPES_u8_ERROR_OK;
 560:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16TimeOutCounter = 0;
 562:	1a 82       	std	Y+2, r1	; 0x02
 564:	19 82       	std	Y+1, r1	; 0x01
	/* Check the Null Pointer */
	if(Copy_pu8RecievedByte == NULL)
 566:	8c 81       	ldd	r24, Y+4	; 0x04
 568:	9d 81       	ldd	r25, Y+5	; 0x05
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	41 f4       	brne	.+16     	; 0x57e <SPI_u8RecieveDataByteSynch+0x30>
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	8b 83       	std	Y+3, r24	; 0x03
 572:	1f c0       	rjmp	.+62     	; 0x5b2 <SPI_u8RecieveDataByteSynch+0x64>
	else
	{
		/* wait until Transmission is completed */
		while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
		{
			Local_u16TimeOutCounter++;
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	9a 81       	ldd	r25, Y+2	; 0x02
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	9a 83       	std	Y+2, r25	; 0x02
 57c:	89 83       	std	Y+1, r24	; 0x01
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
	}
	else
	{
		/* wait until Transmission is completed */
		while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
 57e:	ee e2       	ldi	r30, 0x2E	; 46
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	34 f0       	brlt	.+12     	; 0x594 <SPI_u8RecieveDataByteSynch+0x46>
 588:	89 81       	ldd	r24, Y+1	; 0x01
 58a:	9a 81       	ldd	r25, Y+2	; 0x02
 58c:	23 ec       	ldi	r18, 0xC3	; 195
 58e:	80 35       	cpi	r24, 0x50	; 80
 590:	92 07       	cpc	r25, r18
 592:	80 f3       	brcs	.-32     	; 0x574 <SPI_u8RecieveDataByteSynch+0x26>
		{
			Local_u16TimeOutCounter++;
		}
		if(Local_u16TimeOutCounter >= SPI_u16_TIMEOUT)
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	23 ec       	ldi	r18, 0xC3	; 195
 59a:	80 35       	cpi	r24, 0x50	; 80
 59c:	92 07       	cpc	r25, r18
 59e:	18 f0       	brcs	.+6      	; 0x5a6 <SPI_u8RecieveDataByteSynch+0x58>
		{
			Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	8b 83       	std	Y+3, r24	; 0x03
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <SPI_u8RecieveDataByteSynch+0x64>
		}
		else
		{
			*Copy_pu8RecievedByte = SPDR;
 5a6:	ef e2       	ldi	r30, 0x2F	; 47
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	80 81       	ld	r24, Z
 5ac:	ec 81       	ldd	r30, Y+4	; 0x04
 5ae:	fd 81       	ldd	r31, Y+5	; 0x05
 5b0:	80 83       	st	Z, r24
		}
	}

	return Local_u8ReturnState;
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <SPI_u8SendRecieveByteSynch>:

u8   SPI_u8SendRecieveByteSynch(u8 Copy_u8TransByte,u8 * Copy_pu8RecievedByte)
{
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	00 d0       	rcall	.+0      	; 0x5ca <SPI_u8SendRecieveByteSynch+0x6>
 5ca:	00 d0       	rcall	.+0      	; 0x5cc <SPI_u8SendRecieveByteSynch+0x8>
 5cc:	00 d0       	rcall	.+0      	; 0x5ce <SPI_u8SendRecieveByteSynch+0xa>
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	8c 83       	std	Y+4, r24	; 0x04
 5d4:	7e 83       	std	Y+6, r23	; 0x06
 5d6:	6d 83       	std	Y+5, r22	; 0x05
	u8  Local_u8ReturnState = STD_TYPES_u8_ERROR_OK;
 5d8:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16TimeOutCounter = 0;
 5da:	1a 82       	std	Y+2, r1	; 0x02
 5dc:	19 82       	std	Y+1, r1	; 0x01
	/* Check the Null Pointer */
	if(Copy_pu8RecievedByte == NULL)
 5de:	8d 81       	ldd	r24, Y+5	; 0x05
 5e0:	9e 81       	ldd	r25, Y+6	; 0x06
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	19 f4       	brne	.+6      	; 0x5ec <SPI_u8SendRecieveByteSynch+0x28>
	{
		Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	8b 83       	std	Y+3, r24	; 0x03
 5ea:	33 c0       	rjmp	.+102    	; 0x652 <SPI_u8SendRecieveByteSynch+0x8e>
	}
	else
	{
		/* Write Data into Data register */
		SPDR = Copy_u8TransByte;
 5ec:	ef e2       	ldi	r30, 0x2F	; 47
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	8c 81       	ldd	r24, Y+4	; 0x04
 5f2:	80 83       	st	Z, r24
		/* Check Collision flag */
		if( GET_BIT(SPSR,SPSR_WCOL) == 1)
 5f4:	ee e2       	ldi	r30, 0x2E	; 46
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	82 95       	swap	r24
 5fc:	86 95       	lsr	r24
 5fe:	86 95       	lsr	r24
 600:	83 70       	andi	r24, 0x03	; 3
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	81 70       	andi	r24, 0x01	; 1
 608:	90 70       	andi	r25, 0x00	; 0
 60a:	88 23       	and	r24, r24
 60c:	41 f0       	breq	.+16     	; 0x61e <SPI_u8SendRecieveByteSynch+0x5a>
		{
			Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	8b 83       	std	Y+3, r24	; 0x03
 612:	05 c0       	rjmp	.+10     	; 0x61e <SPI_u8SendRecieveByteSynch+0x5a>
		}
		/* wait until Transmission is completed */
		while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
		{
			Local_u16TimeOutCounter++;
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	9a 81       	ldd	r25, Y+2	; 0x02
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	9a 83       	std	Y+2, r25	; 0x02
 61c:	89 83       	std	Y+1, r24	; 0x01
		if( GET_BIT(SPSR,SPSR_WCOL) == 1)
		{
			Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
		}
		/* wait until Transmission is completed */
		while( (GET_BIT(SPSR,SPSR_SPIF) == 0) && (Local_u16TimeOutCounter < SPI_u16_TIMEOUT) )
 61e:	ee e2       	ldi	r30, 0x2E	; 46
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	88 23       	and	r24, r24
 626:	34 f0       	brlt	.+12     	; 0x634 <SPI_u8SendRecieveByteSynch+0x70>
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	9a 81       	ldd	r25, Y+2	; 0x02
 62c:	23 ec       	ldi	r18, 0xC3	; 195
 62e:	80 35       	cpi	r24, 0x50	; 80
 630:	92 07       	cpc	r25, r18
 632:	80 f3       	brcs	.-32     	; 0x614 <SPI_u8SendRecieveByteSynch+0x50>
		{
			Local_u16TimeOutCounter++;
		}
		if(Local_u16TimeOutCounter >= SPI_u16_TIMEOUT)
 634:	89 81       	ldd	r24, Y+1	; 0x01
 636:	9a 81       	ldd	r25, Y+2	; 0x02
 638:	23 ec       	ldi	r18, 0xC3	; 195
 63a:	80 35       	cpi	r24, 0x50	; 80
 63c:	92 07       	cpc	r25, r18
 63e:	18 f0       	brcs	.+6      	; 0x646 <SPI_u8SendRecieveByteSynch+0x82>
		{
			Local_u8ReturnState = STD_TYPES_u8_ERROR_NOK;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	8b 83       	std	Y+3, r24	; 0x03
 644:	06 c0       	rjmp	.+12     	; 0x652 <SPI_u8SendRecieveByteSynch+0x8e>
		}
		else
		{
			*Copy_pu8RecievedByte = SPDR;
 646:	ef e2       	ldi	r30, 0x2F	; 47
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	ed 81       	ldd	r30, Y+5	; 0x05
 64e:	fe 81       	ldd	r31, Y+6	; 0x06
 650:	80 83       	st	Z, r24
		}
	}

	return Local_u8ReturnState;
 652:	8b 81       	ldd	r24, Y+3	; 0x03
}
 654:	26 96       	adiw	r28, 0x06	; 6
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	cf 91       	pop	r28
 662:	df 91       	pop	r29
 664:	08 95       	ret

00000666 <SPI_u8SendRecieveBufferAsynch>:

u8   SPI_u8SendRecieveBufferAsynch(u8 * Copy_pu8TransmittedBuffer , u8 * Copy_pu8RecievedBuffer , u8 Copy_u8BufferSize , void(*Copy_pfNotificationFunc)(void))
{
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	28 97       	sbiw	r28, 0x08	; 8
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	9b 83       	std	Y+3, r25	; 0x03
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	7d 83       	std	Y+5, r23	; 0x05
 680:	6c 83       	std	Y+4, r22	; 0x04
 682:	4e 83       	std	Y+6, r20	; 0x06
 684:	38 87       	std	Y+8, r19	; 0x08
 686:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ReturnedState = STD_TYPES_u8_ERROR_OK;
 688:	19 82       	std	Y+1, r1	; 0x01
	/* Check Null Pointer */
	if( (Copy_pu8TransmittedBuffer == NULL) || (Copy_pu8RecievedBuffer == NULL) || (Copy_pfNotificationFunc == NULL) || (SPI_u8BusyFlag == 1) )
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	9b 81       	ldd	r25, Y+3	; 0x03
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	61 f0       	breq	.+24     	; 0x6aa <SPI_u8SendRecieveBufferAsynch+0x44>
 692:	8c 81       	ldd	r24, Y+4	; 0x04
 694:	9d 81       	ldd	r25, Y+5	; 0x05
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	41 f0       	breq	.+16     	; 0x6aa <SPI_u8SendRecieveBufferAsynch+0x44>
 69a:	8f 81       	ldd	r24, Y+7	; 0x07
 69c:	98 85       	ldd	r25, Y+8	; 0x08
 69e:	00 97       	sbiw	r24, 0x00	; 0
 6a0:	21 f0       	breq	.+8      	; 0x6aa <SPI_u8SendRecieveBufferAsynch+0x44>
 6a2:	80 91 68 00 	lds	r24, 0x0068
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	19 f4       	brne	.+6      	; 0x6b0 <SPI_u8SendRecieveBufferAsynch+0x4a>
	{
		Local_u8ReturnedState = STD_TYPES_u8_ERROR_NOK;
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	2e c0       	rjmp	.+92     	; 0x70c <SPI_u8SendRecieveBufferAsynch+0xa6>
	}
	else
	{
		/* Set Busy Flag */
		SPI_u8BusyFlag = 1;
 6b0:	81 e0       	ldi	r24, 0x01	; 1
 6b2:	80 93 68 00 	sts	0x0068, r24
		/* Init Global Pointers */
		SPI_pu8TransmittedBuffer = Copy_pu8TransmittedBuffer;
 6b6:	8a 81       	ldd	r24, Y+2	; 0x02
 6b8:	9b 81       	ldd	r25, Y+3	; 0x03
 6ba:	90 93 61 00 	sts	0x0061, r25
 6be:	80 93 60 00 	sts	0x0060, r24

		SPI_pu8RecievedBuffer    = Copy_pu8RecievedBuffer;
 6c2:	8c 81       	ldd	r24, Y+4	; 0x04
 6c4:	9d 81       	ldd	r25, Y+5	; 0x05
 6c6:	90 93 63 00 	sts	0x0063, r25
 6ca:	80 93 62 00 	sts	0x0062, r24

		SPI_u8BufferSize         = Copy_u8BufferSize;
 6ce:	8e 81       	ldd	r24, Y+6	; 0x06
 6d0:	80 93 66 00 	sts	0x0066, r24

		SPI_pfNotificationFun    = Copy_pfNotificationFunc;
 6d4:	8f 81       	ldd	r24, Y+7	; 0x07
 6d6:	98 85       	ldd	r25, Y+8	; 0x08
 6d8:	90 93 65 00 	sts	0x0065, r25
 6dc:	80 93 64 00 	sts	0x0064, r24

		/* Send The First Byte */
		SPDR = SPI_pu8TransmittedBuffer[SPI_u8BufferIndex];
 6e0:	af e2       	ldi	r26, 0x2F	; 47
 6e2:	b0 e0       	ldi	r27, 0x00	; 0
 6e4:	20 91 60 00 	lds	r18, 0x0060
 6e8:	30 91 61 00 	lds	r19, 0x0061
 6ec:	80 91 67 00 	lds	r24, 0x0067
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	f9 01       	movw	r30, r18
 6f6:	e8 0f       	add	r30, r24
 6f8:	f9 1f       	adc	r31, r25
 6fa:	80 81       	ld	r24, Z
 6fc:	8c 93       	st	X, r24

		/* Enable SPI Interrupt */
		SET_BIT(SPCR,SPCR_SPIE);
 6fe:	ad e2       	ldi	r26, 0x2D	; 45
 700:	b0 e0       	ldi	r27, 0x00	; 0
 702:	ed e2       	ldi	r30, 0x2D	; 45
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	80 81       	ld	r24, Z
 708:	80 68       	ori	r24, 0x80	; 128
 70a:	8c 93       	st	X, r24
	}
	return Local_u8ReturnedState;
 70c:	89 81       	ldd	r24, Y+1	; 0x01
}
 70e:	28 96       	adiw	r28, 0x08	; 8
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	cf 91       	pop	r28
 71c:	df 91       	pop	r29
 71e:	08 95       	ret

00000720 <__vector_12>:


void __vector_12(void)
{
 720:	1f 92       	push	r1
 722:	0f 92       	push	r0
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	0f 92       	push	r0
 728:	11 24       	eor	r1, r1
 72a:	2f 93       	push	r18
 72c:	3f 93       	push	r19
 72e:	4f 93       	push	r20
 730:	5f 93       	push	r21
 732:	6f 93       	push	r22
 734:	7f 93       	push	r23
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	af 93       	push	r26
 73c:	bf 93       	push	r27
 73e:	ef 93       	push	r30
 740:	ff 93       	push	r31
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
	/* Read Data byte */
	SPI_pu8RecievedBuffer[SPI_u8BufferIndex] = SPDR ;
 74a:	20 91 62 00 	lds	r18, 0x0062
 74e:	30 91 63 00 	lds	r19, 0x0063
 752:	80 91 67 00 	lds	r24, 0x0067
 756:	88 2f       	mov	r24, r24
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	d9 01       	movw	r26, r18
 75c:	a8 0f       	add	r26, r24
 75e:	b9 1f       	adc	r27, r25
 760:	ef e2       	ldi	r30, 0x2F	; 47
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	8c 93       	st	X, r24

	/* Increment Buffer index */
	SPI_u8BufferIndex++;
 768:	80 91 67 00 	lds	r24, 0x0067
 76c:	8f 5f       	subi	r24, 0xFF	; 255
 76e:	80 93 67 00 	sts	0x0067, r24
	/* Check That Buffer index = Buffer size or not */
	if(SPI_u8BufferIndex == SPI_u8BufferSize)
 772:	90 91 67 00 	lds	r25, 0x0067
 776:	80 91 66 00 	lds	r24, 0x0066
 77a:	98 17       	cp	r25, r24
 77c:	89 f4       	brne	.+34     	; 0x7a0 <__vector_12+0x80>
	{
		/* Disable Interrupt */
		CLR_BIT(SPCR,SPCR_SPIE);
 77e:	ad e2       	ldi	r26, 0x2D	; 45
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	ed e2       	ldi	r30, 0x2D	; 45
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	8f 77       	andi	r24, 0x7F	; 127
 78a:	8c 93       	st	X, r24

		/* Clear Buffer index */
		SPI_u8BufferIndex = 0;
 78c:	10 92 67 00 	sts	0x0067, r1

		/* Call notification function */
		SPI_pfNotificationFun();
 790:	e0 91 64 00 	lds	r30, 0x0064
 794:	f0 91 65 00 	lds	r31, 0x0065
 798:	09 95       	icall

		/* Clear busy flag */
		SPI_u8BusyFlag = 0;
 79a:	10 92 68 00 	sts	0x0068, r1
 79e:	0f c0       	rjmp	.+30     	; 0x7be <__vector_12+0x9e>
	}
	else
	{
		/* Send The Next Byte */
		SPDR = SPI_pu8TransmittedBuffer[SPI_u8BufferIndex];
 7a0:	af e2       	ldi	r26, 0x2F	; 47
 7a2:	b0 e0       	ldi	r27, 0x00	; 0
 7a4:	20 91 60 00 	lds	r18, 0x0060
 7a8:	30 91 61 00 	lds	r19, 0x0061
 7ac:	80 91 67 00 	lds	r24, 0x0067
 7b0:	88 2f       	mov	r24, r24
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	f9 01       	movw	r30, r18
 7b6:	e8 0f       	add	r30, r24
 7b8:	f9 1f       	adc	r31, r25
 7ba:	80 81       	ld	r24, Z
 7bc:	8c 93       	st	X, r24
	}

}
 7be:	cf 91       	pop	r28
 7c0:	df 91       	pop	r29
 7c2:	ff 91       	pop	r31
 7c4:	ef 91       	pop	r30
 7c6:	bf 91       	pop	r27
 7c8:	af 91       	pop	r26
 7ca:	9f 91       	pop	r25
 7cc:	8f 91       	pop	r24
 7ce:	7f 91       	pop	r23
 7d0:	6f 91       	pop	r22
 7d2:	5f 91       	pop	r21
 7d4:	4f 91       	pop	r20
 7d6:	3f 91       	pop	r19
 7d8:	2f 91       	pop	r18
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <main>:
//#define SREG  *((volatile u8*)0x5F)

unsigned int ADC_read(unsigned char chnl);

int main(void)
{
 7e4:	df 93       	push	r29
 7e6:	cf 93       	push	r28
 7e8:	00 d0       	rcall	.+0      	; 0x7ea <main+0x6>
 7ea:	0f 92       	push	r0
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62
	u8 Result;
	u8 AnalogVal;
	u8 Ch;
	PORTInitialize();
 7f0:	0e 94 08 02 	call	0x410	; 0x410 <PORTInitialize>

	/* Set Pull up resistor for SS */
	SetPinValue('B',4,1);
 7f4:	82 e4       	ldi	r24, 0x42	; 66
 7f6:	64 e0       	ldi	r22, 0x04	; 4
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 ab 00 	call	0x156	; 0x156 <SetPinValue>

	/* Enable Global Int */
	SET_BIT(SREG,7);
 7fe:	af e5       	ldi	r26, 0x5F	; 95
 800:	b0 e0       	ldi	r27, 0x00	; 0
 802:	ef e5       	ldi	r30, 0x5F	; 95
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	80 68       	ori	r24, 0x80	; 128
 80a:	8c 93       	st	X, r24
	SPI_voidInit();
 80c:	0e 94 1f 02 	call	0x43e	; 0x43e <SPI_voidInit>

	//ADC_voidInit();

	PORTC = 0xFF;         //make PORTC as output to connect 8 leds
 810:	e5 e3       	ldi	r30, 0x35	; 53
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	80 83       	st	Z, r24
	ADMUX=(1<<REFS0);      // Selecting internal reference voltage
 818:	e7 e2       	ldi	r30, 0x27	; 39
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	80 e4       	ldi	r24, 0x40	; 64
 81e:	80 83       	st	Z, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);     // Enable ADC also set Prescaler as 128
 820:	e6 e2       	ldi	r30, 0x26	; 38
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	87 e8       	ldi	r24, 0x87	; 135
 826:	80 83       	st	Z, r24

	while (1)
	{
		Ch=SPI_u8SendDataByteSynch(Result);
 828:	8b 81       	ldd	r24, Y+3	; 0x03
 82a:	0e 94 49 02 	call	0x492	; 0x492 <SPI_u8SendDataByteSynch>
 82e:	89 83       	std	Y+1, r24	; 0x01
		Result = ADC_read(Ch);   //save adc read value in integer
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	0e 94 1d 04 	call	0x83a	; 0x83a <ADC_read>
 836:	8b 83       	std	Y+3, r24	; 0x03
 838:	f7 cf       	rjmp	.-18     	; 0x828 <main+0x44>

0000083a <ADC_read>:
}



unsigned int ADC_read(unsigned char chnl)
{
 83a:	df 93       	push	r29
 83c:	cf 93       	push	r28
 83e:	0f 92       	push	r0
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	89 83       	std	Y+1, r24	; 0x01
	chnl= chnl & 0b00000111; // select adc channel between 0 to 7
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	87 70       	andi	r24, 0x07	; 7
 84a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = 0x40;        //channel A0 selected
 84c:	e7 e2       	ldi	r30, 0x27	; 39
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 e4       	ldi	r24, 0x40	; 64
 852:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);   // start conversion
 854:	a6 e2       	ldi	r26, 0x26	; 38
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	e6 e2       	ldi	r30, 0x26	; 38
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	80 64       	ori	r24, 0x40	; 64
 860:	8c 93       	st	X, r24
	while(!(ADCSRA & (1<<ADIF)));   // wait for ADIF conversion complete return
 862:	e6 e2       	ldi	r30, 0x26	; 38
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	88 2f       	mov	r24, r24
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	80 71       	andi	r24, 0x10	; 16
 86e:	90 70       	andi	r25, 0x00	; 0
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	b9 f3       	breq	.-18     	; 0x862 <__stack+0x3>
	ADCSRA|=(1<<ADIF);   // clear ADIF when conversion complete by writing 1
 874:	a6 e2       	ldi	r26, 0x26	; 38
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	e6 e2       	ldi	r30, 0x26	; 38
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	80 61       	ori	r24, 0x10	; 16
 880:	8c 93       	st	X, r24
	return (ADC); //return calculated ADC value
 882:	e4 e2       	ldi	r30, 0x24	; 36
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	91 81       	ldd	r25, Z+1	; 0x01
}
 88a:	0f 90       	pop	r0
 88c:	cf 91       	pop	r28
 88e:	df 91       	pop	r29
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
