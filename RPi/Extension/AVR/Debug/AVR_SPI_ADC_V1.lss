
AVR_SPI_ADC_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000332  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000008c4  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000085b  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 42 01 	call	0x284	; 0x284 <main>
  7a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC.h"



void ADC_Init(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	/* Reference Voltage and Left adjust disable (Read ADCL only) */
	ADMUX &= ~(1 << REFS1);
  8a:	a7 e2       	ldi	r26, 0x27	; 39
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	e7 e2       	ldi	r30, 0x27	; 39
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	8c 93       	st	X, r24
	ADMUX |= (1 << REFS0);
  98:	a7 e2       	ldi	r26, 0x27	; 39
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e7 e2       	ldi	r30, 0x27	; 39
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR);   // Enable Adjust Left
  a6:	a7 e2       	ldi	r26, 0x27	; 39
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e7 e2       	ldi	r30, 0x27	; 39
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	8c 93       	st	X, r24

	/* Prescaler divisor by 32 */
	ADCSRA = 0 ;
  b4:	e6 e2       	ldi	r30, 0x26	; 38
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS2) |(1<<ADPS0) | (1<<ADPS1);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 60       	ori	r24, 0x07	; 7
  c6:	8c 93       	st	X, r24

	/* Enable Interrupt */
//	ADCSRA |= (1 << ADIE);

	/* Enable ADC */
	ADCSRA |= (1 << ADEN);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24

}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_Start>:

void ADC_Start(uint8_t channel_num, uint8_t *rData)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <ADC_Start+0x6>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	7b 83       	std	Y+3, r23	; 0x03
  ec:	6a 83       	std	Y+2, r22	; 0x02
	/* select channel number to read */
	channel_num &= 0x07;
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	87 70       	andi	r24, 0x07	; 7
  f2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xF8;
  f4:	a7 e2       	ldi	r26, 0x27	; 39
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e7 e2       	ldi	r30, 0x27	; 39
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 7f       	andi	r24, 0xF8	; 248
 100:	8c 93       	st	X, r24
	ADMUX |= channel_num;
 102:	a7 e2       	ldi	r26, 0x27	; 39
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e7 e2       	ldi	r30, 0x27	; 39
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	89 2b       	or	r24, r25
 110:	8c 93       	st	X, r24


	/* Start conversion */
	ADCSRA |= (1 << ADSC);
 112:	a6 e2       	ldi	r26, 0x26	; 38
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e6 e2       	ldi	r30, 0x26	; 38
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 64       	ori	r24, 0x40	; 64
 11e:	8c 93       	st	X, r24

	/* wait to conversion finish */
	while(!(ADCSRA & (1 << ADIF)));
 120:	e6 e2       	ldi	r30, 0x26	; 38
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	80 71       	andi	r24, 0x10	; 16
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	b9 f3       	breq	.-18     	; 0x120 <ADC_Start+0x44>

	/* Clear ADIF flag when conversion finished */
	ADCSRA |= (1 << ADIF);
 132:	a6 e2       	ldi	r26, 0x26	; 38
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e6 e2       	ldi	r30, 0x26	; 38
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	8c 93       	st	X, r24

	*rData = ADCL;
 140:	e4 e2       	ldi	r30, 0x24	; 36
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	ea 81       	ldd	r30, Y+2	; 0x02
 148:	fb 81       	ldd	r31, Y+3	; 0x03
 14a:	80 83       	st	Z, r24
	*rData = ADCH;
 14c:	e5 e2       	ldi	r30, 0x25	; 37
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	ea 81       	ldd	r30, Y+2	; 0x02
 154:	fb 81       	ldd	r31, Y+3	; 0x03
 156:	80 83       	st	Z, r24
}
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	cf 91       	pop	r28
 160:	df 91       	pop	r29
 162:	08 95       	ret

00000164 <SPI_MasterInit>:

#include "SPI.h"


void SPI_MasterInit(void)
{
 164:	df 93       	push	r29
 166:	cf 93       	push	r28
 168:	0f 92       	push	r0
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
 16e:	19 82       	std	Y+1, r1	; 0x01

	/* Set MOSI, SCK and SS output, all others input */
	DDR_SPI |= (1 << MOSI) | (1 << SCK) | (1 << SS);
 170:	a7 e3       	ldi	r26, 0x37	; 55
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e7 e3       	ldi	r30, 0x37	; 55
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 6b       	ori	r24, 0xB0	; 176
 17c:	8c 93       	st	X, r24

	/* Enable SPI, Master, set clock rate FCK/16 */
	SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0) | (1 << CPHA);
 17e:	ed e2       	ldi	r30, 0x2D	; 45
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	85 e5       	ldi	r24, 0x55	; 85
 184:	80 83       	st	Z, r24

	temp = SPSR;
 186:	ee e2       	ldi	r30, 0x2E	; 46
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	89 83       	std	Y+1, r24	; 0x01
}
 18e:	0f 90       	pop	r0
 190:	cf 91       	pop	r28
 192:	df 91       	pop	r29
 194:	08 95       	ret

00000196 <SPI_MasterRW>:


void SPI_MasterRW(uint8_t CS, uint8_t tData, uint8_t *rData)
{
 196:	df 93       	push	r29
 198:	cf 93       	push	r28
 19a:	00 d0       	rcall	.+0      	; 0x19c <SPI_MasterRW+0x6>
 19c:	00 d0       	rcall	.+0      	; 0x19e <SPI_MasterRW+0x8>
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	89 83       	std	Y+1, r24	; 0x01
 1a4:	6a 83       	std	Y+2, r22	; 0x02
 1a6:	5c 83       	std	Y+4, r21	; 0x04
 1a8:	4b 83       	std	Y+3, r20	; 0x03
	/* Activate slave by writing low to SS pin*/
	PORT_SPI &= ~(1 << CS);
 1aa:	a8 e3       	ldi	r26, 0x38	; 56
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e8 e3       	ldi	r30, 0x38	; 56
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <SPI_MasterRW+0x32>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <SPI_MasterRW+0x2e>
 1cc:	80 95       	com	r24
 1ce:	84 23       	and	r24, r20
 1d0:	8c 93       	st	X, r24

	/* Start transmission */
	SPDR = tData;
 1d2:	ef e2       	ldi	r30, 0x2F	; 47
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	80 83       	st	Z, r24

	/* Wait for transmission complete */
	while(!(SPSR & (1 << SPIF)));
 1da:	ee e2       	ldi	r30, 0x2E	; 46
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	88 23       	and	r24, r24
 1e2:	dc f7       	brge	.-10     	; 0x1da <SPI_MasterRW+0x44>

	/* Read received data */
	*rData = SPDR;
 1e4:	ef e2       	ldi	r30, 0x2F	; 47
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	eb 81       	ldd	r30, Y+3	; 0x03
 1ec:	fc 81       	ldd	r31, Y+4	; 0x04
 1ee:	80 83       	st	Z, r24

	/* Deactivate slave by writing high to SS pin*/
	PORT_SPI |= (1 << CS);
 1f0:	a8 e3       	ldi	r26, 0x38	; 56
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e8 e3       	ldi	r30, 0x38	; 56
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	48 2f       	mov	r20, r24
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	28 2f       	mov	r18, r24
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 2e       	mov	r0, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <SPI_MasterRW+0x78>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <SPI_MasterRW+0x74>
 212:	84 2b       	or	r24, r20
 214:	8c 93       	st	X, r24
}
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	DDR_SPI |= (1 << MISO);
 22c:	a7 e3       	ldi	r26, 0x37	; 55
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e7 e3       	ldi	r30, 0x37	; 55
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 64       	ori	r24, 0x40	; 64
 238:	8c 93       	st	X, r24

	/* Enable SPI */
	SPCR = (1<<SPE) | (1 << CPHA);
 23a:	ed e2       	ldi	r30, 0x2D	; 45
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	84 e4       	ldi	r24, 0x44	; 68
 240:	80 83       	st	Z, r24
}
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <SPI_SlaveRW>:


void SPI_SlaveRW(uint8_t tData, uint8_t *rData)
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	00 d0       	rcall	.+0      	; 0x24e <SPI_SlaveRW+0x6>
 24e:	0f 92       	push	r0
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	7b 83       	std	Y+3, r23	; 0x03
 258:	6a 83       	std	Y+2, r22	; 0x02
	/* Set data to be transmitted */
	SPDR = tData;
 25a:	ef e2       	ldi	r30, 0x2F	; 47
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	80 83       	st	Z, r24

	/* Wait for reception complete */
	while(!(SPSR & (1<<SPIF)));
 262:	ee e2       	ldi	r30, 0x2E	; 46
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	dc f7       	brge	.-10     	; 0x262 <SPI_SlaveRW+0x1a>

	/* Return data register */
	*rData = SPDR;
 26c:	ef e2       	ldi	r30, 0x2F	; 47
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	ea 81       	ldd	r30, Y+2	; 0x02
 274:	fb 81       	ldd	r31, Y+3	; 0x03
 276:	80 83       	st	Z, r24
}
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	08 95       	ret

00000284 <main>:

void ADC_ChannelsDataSend(uint8_t *dataArr, uint8_t dataSize);

int
main(void)
{
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
	ADC_Init();
 28c:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	SPI_SlaveInit();
 290:	0e 94 12 01 	call	0x224	; 0x224 <SPI_SlaveInit>

	DDRC = 0xFF;
 294:	e4 e3       	ldi	r30, 0x34	; 52
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	80 83       	st	Z, r24
	DDRA = 0x00;
 29c:	ea e3       	ldi	r30, 0x3A	; 58
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	10 82       	st	Z, r1

	while(1)
	{
		ADC_ChannelsDataSend(ADC_ChannelDataArr, NUM_OF_CHANNELS);
 2a2:	80 e6       	ldi	r24, 0x60	; 96
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	68 e0       	ldi	r22, 0x08	; 8
 2a8:	0e 94 57 01 	call	0x2ae	; 0x2ae <ADC_ChannelsDataSend>
 2ac:	fa cf       	rjmp	.-12     	; 0x2a2 <main+0x1e>

000002ae <ADC_ChannelsDataSend>:
	return 0;
}


void ADC_ChannelsDataSend(uint8_t *dataArr, uint8_t dataSize)
{
 2ae:	df 93       	push	r29
 2b0:	cf 93       	push	r28
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <ADC_ChannelsDataSend+0x6>
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <ADC_ChannelsDataSend+0x8>
 2b6:	0f 92       	push	r0
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	9c 83       	std	Y+4, r25	; 0x04
 2be:	8b 83       	std	Y+3, r24	; 0x03
 2c0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t indx = 0;
 2c2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t recData = 0;
 2c4:	1a 82       	std	Y+2, r1	; 0x02
	SPI_SlaveRW(0xBB, &recData);
 2c6:	9e 01       	movw	r18, r28
 2c8:	2e 5f       	subi	r18, 0xFE	; 254
 2ca:	3f 4f       	sbci	r19, 0xFF	; 255
 2cc:	8b eb       	ldi	r24, 0xBB	; 187
 2ce:	b9 01       	movw	r22, r18
 2d0:	0e 94 24 01 	call	0x248	; 0x248 <SPI_SlaveRW>
	if (recData == 0xAA)
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	8a 3a       	cpi	r24, 0xAA	; 170
 2d8:	11 f5       	brne	.+68     	; 0x31e <ADC_ChannelsDataSend+0x70>
	{
		for(indx=0;indx < dataSize;indx++)
 2da:	19 82       	std	Y+1, r1	; 0x01
 2dc:	1c c0       	rjmp	.+56     	; 0x316 <ADC_ChannelsDataSend+0x68>
		{
			ADC_Start(indx, ADC_ChannelDataArr + indx);
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9c 01       	movw	r18, r24
 2e6:	20 5a       	subi	r18, 0xA0	; 160
 2e8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	b9 01       	movw	r22, r18
 2ee:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Start>
			SPI_SlaveRW(dataArr[indx], &recData);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	9c 81       	ldd	r25, Y+4	; 0x04
 2fc:	fc 01       	movw	r30, r24
 2fe:	e2 0f       	add	r30, r18
 300:	f3 1f       	adc	r31, r19
 302:	80 81       	ld	r24, Z
 304:	9e 01       	movw	r18, r28
 306:	2e 5f       	subi	r18, 0xFE	; 254
 308:	3f 4f       	sbci	r19, 0xFF	; 255
 30a:	b9 01       	movw	r22, r18
 30c:	0e 94 24 01 	call	0x248	; 0x248 <SPI_SlaveRW>
	uint8_t indx = 0;
	uint8_t recData = 0;
	SPI_SlaveRW(0xBB, &recData);
	if (recData == 0xAA)
	{
		for(indx=0;indx < dataSize;indx++)
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	89 83       	std	Y+1, r24	; 0x01
 316:	99 81       	ldd	r25, Y+1	; 0x01
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	98 17       	cp	r25, r24
 31c:	00 f3       	brcs	.-64     	; 0x2de <ADC_ChannelsDataSend+0x30>
			ADC_Start(indx, ADC_ChannelDataArr + indx);
			SPI_SlaveRW(dataArr[indx], &recData);
		}
	}
	//PORTC = indx;
}
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
